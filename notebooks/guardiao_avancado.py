# -*- coding: utf-8 -*-
"""guardiao_avancado

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i_5FHTPYIhIiPczZC-7mPGfw6omMGsWt

# üê¢ Guardi√£o das Tartaruguinhas: Monitoramento Comunit√°rio de Ninhos

**Desenvolvido por:** Eric Narciso Pimentel dos Santos

**Curso:** Intelig√™ncia Artificial Aplicada aos Desafios Socioambientais da Amaz√¥nia

**Institui√ß√£o:** I2A2 - Instituto de Intelig√™ncia Artificial Aplicada

**Data:** 28/07/2025

---

## 1. Contexto do Projeto

Em uma comunidade ribeirinha no cora√ß√£o da Amaz√¥nia, um esfor√ßo coletivo e inspirador de conserva√ß√£o dos quel√¥nios ganha vida. Liderado por professores e jovens volunt√°rios, o projeto **Guardi√£o das Tartaruguinhas** visa monitorar os ninhos de tartarugas para garantir que o maior n√∫mero poss√≠vel de filhotes chegue com seguran√ßa ao rio, fortalecendo o ciclo de preserva√ß√£o e a cultura local.

## 2. O Desafio

Os dados dos ninhos ‚Äî como localiza√ß√£o, quantidade de ovos, status e riscos ‚Äî eram registrados manualmente em papel. Essa metodologia, embora nobre, resultava em informa√ß√µes desorganizadas, inconsistentes e de dif√≠cil an√°lise. Responder a perguntas essenciais para a tomada de decis√£o, como "Qual a m√©dia de ovos?" ou "Qual regi√£o apresenta maior risco?", tornava-se uma tarefa √°rdua e imprecisa.

## 3. A Solu√ß√£o Proposta

Este notebook representa a solu√ß√£o tecnol√≥gica para o desafio. Trata-se de um sistema simples, por√©m robusto, desenvolvido em Python para permitir que os volunt√°rios da comunidade possam:

* **Registrar** os dados dos ninhos de forma padronizada.
* **Validar** as informa√ß√µes no momento da entrada para garantir sua integridade.
* **Analisar** os dados acumulados para gerar estat√≠sticas e insights acion√°veis.
* **Apoiar** a tomada de decis√£o semanal do grupo de prote√ß√£o, otimizando os esfor√ßos de conserva√ß√£o.

> ## Nosso desafio n√£o √© apenas contar os ovos. √â usar cada n√∫mero, cada dado, para tecer uma rede de prote√ß√£o em torno da vida. Aqui, cada linha de c√≥digo √© um ato de esperan√ßa.

Este projeto √© a ponte entre o conhecimento tradicional e a tecnologia acess√≠vel, transformando dados em um escudo para a biodiversidade amaz√¥nica.
"""

# ----------------------------------------------------------------------------
# SE√á√ÉO 0: CONSTANTES E CONFIGURA√á√ïES
# ----------------------------------------------------------------------------

# --- Regras de Neg√≥cio ---
OVOS_MIN_REALISTA = 5
OVOS_MAX_REALISTA = 200
DIAS_ECLOSAO_MIN = 1
DIAS_ECLOSAO_MAX = 130

# --- Constantes Visuais (C√≥digos de Escape ANSI para Cores) ---
CORES = {
    "VERDE": "\033[92m",
    "AMARELO": "\033[93m",
    "VERMELHO": "\033[91m",
    "AZUL": "\033[94m",
    "CIANO": "\033[96m",
    "NEGRITO": "\033[1m",
    "RESET": "\033[0m"
}

# ----------------------------------------------------------------------------
# SE√á√ÉO 1: ESTRUTURA DE DADOS E CARGA INICIAL (ENRIQUECIDA)
# ----------------------------------------------------------------------------
ninhos = [
    {"regiao": "Praia Norte", "quantidade_ovos": 102, "status": "intacto", "risco": "üü¢", "dias_para_eclosao": 12, "predadores": False, "causa_risco": "nenhuma"},
    {"regiao": "Praia Central", "quantidade_ovos": 89, "status": "danificado", "risco": "üî¥", "dias_para_eclosao": 3, "predadores": True, "causa_risco": "predador"},
    {"regiao": "Praia Sul", "quantidade_ovos": 120, "status": "amea√ßado", "risco": "üü°", "dias_para_eclosao": 7, "predadores": False, "causa_risco": "alagamento"},
    {"regiao": "Praia Central", "quantidade_ovos": 75, "status": "intacto", "risco": "üü¢", "dias_para_eclosao": 2, "predadores": False, "causa_risco": "nenhuma"},
    {"regiao": "Praia Norte", "quantidade_ovos": 60, "status": "danificado", "risco": "üî¥", "dias_para_eclosao": 5, "predadores": True, "causa_risco": "predador"},
    {"regiao": "Praia Sul", "quantidade_ovos": 95, "status": "intacto", "risco": "üü¢", "dias_para_eclosao": 20, "predadores": False, "causa_risco": "nenhuma"},
    {"regiao": "Praia Norte", "quantidade_ovos": 110, "status": "amea√ßado", "risco": "üü°", "dias_para_eclosao": 8, "predadores": True, "causa_risco": "predador"},
    {"regiao": "Praia Central", "quantidade_ovos": 81, "status": "amea√ßado", "risco": "üü°", "dias_para_eclosao": 15, "predadores": False, "causa_risco": "humano"},
    {"regiao": "Praia Sul", "quantidade_ovos": 70, "status": "danificado", "risco": "üî¥", "dias_para_eclosao": 1, "predadores": True, "causa_risco": "predador"},
    {"regiao": "Praia Norte", "quantidade_ovos": 130, "status": "intacto", "risco": "üü¢", "dias_para_eclosao": 25, "predadores": False, "causa_risco": "nenhuma"},
]

# ----------------------------------------------------------------------------
# SE√á√ÉO 2: FUN√á√ïES UTILIT√ÅRIAS E DE DESIGN
# ----------------------------------------------------------------------------

def desenhar_divisor(caractere="~", tamanho=80):
    """Cria um divisor tem√°tico para a interface."""
    print(f"{CORES['AZUL']}{caractere * tamanho}{CORES['RESET']}")

def gerar_barra_percentual(percentual, largura=20):
    """Cria uma barra de progresso textual para visualiza√ß√£o."""
    blocos_preenchidos = int((percentual / 100) * largura)
    barra = "‚ñà" * blocos_preenchidos + " " * (largura - blocos_preenchidos)
    return f"[{barra}]"

# ----------------------------------------------------------------------------
# SE√á√ÉO 3: FUN√á√ïES DE AN√ÅLISE E RELAT√ìRIOS
# ----------------------------------------------------------------------------

def exibir_painel_alerta(base_de_ninhos):
    """Mostra um dashboard com os indicadores mais cr√≠ticos."""
    desenhar_divisor("=")
    print("||" + f"{CORES['NEGRITO']}{CORES['VERMELHO']} üö® PAINEL DE ALERTA R√ÅPIDO üö® {CORES['RESET']}".center(96) + "||")
    desenhar_divisor("=")
    if not base_de_ninhos: print("\nNenhum dado para an√°lise.\n"); desenhar_divisor("="); return

    ninhos_risco_critico = sum(1 for n in base_de_ninhos if n["risco"] == "üî¥")
    ninhos_eclosao_urgente = sum(1 for n in base_de_ninhos if n["dias_para_eclosao"] <= 2)

    contagem_critica_regiao = {}
    for n in base_de_ninhos:
        if n["risco"] == "üî¥":
            regiao = n["regiao"]
            contagem_critica_regiao[regiao] = contagem_critica_regiao.get(regiao, 0) + 1

    regiao_mais_critica = "Nenhuma"
    if contagem_critica_regiao:
        regiao_mais_critica = max(contagem_critica_regiao, key=contagem_critica_regiao.get)

    total_ninhos = len(base_de_ninhos)
    ninhos_intactos = sum(1 for n in base_de_ninhos if n["status"] == "intacto")
    taxa_sobrevivencia = (ninhos_intactos / total_ninhos) * 100 if total_ninhos > 0 else 0

    print(f"\n  - {CORES['VERMELHO']}Ninhos em Risco Cr√≠tico (üî¥):{CORES['RESET']} {ninhos_risco_critico} ninhos")
    print(f"  - {CORES['CIANO']}Eclos√£o Urgente (em at√© 48h):{CORES['RESET']} {ninhos_eclosao_urgente} ninhos")
    print(f"  - {CORES['AMARELO']}Regi√£o com Maior Risco Cr√≠tico:{CORES['RESET']} {regiao_mais_critica}")
    print(f"  - {CORES['VERDE']}Taxa de Ninhos Intactos:{CORES['RESET']} {taxa_sobrevivencia:.1f}%")
    print()
    desenhar_divisor("=")

def exibir_relatorio_completo(base_de_ninhos):
    """Exibe um relat√≥rio formatado e colorido de todos os ninhos."""
    desenhar_divisor()
    print("||" + " RELAT√ìRIO COMPLETO DE NINHOS ".center(76) + "||")
    desenhar_divisor()
    if not base_de_ninhos:
        print("\nNenhum ninho registrado na base de dados.\n")
    else:
        print(f"| {CORES['NEGRITO']}{'ID':<3} | {'REGI√ÉO':<15} | {'OVOS':<5} | {'STATUS':<12} | {'RISCO':<7} | {'ECLOS√ÉO (dias)':<16} | {'PREDADORES':<10} | {'CAUSA RISCO':<12}{CORES['RESET']} |")
        print("-" * 95)
        id_ninho = 1
        for ninho in base_de_ninhos:
            cor = CORES["RESET"]
            if ninho["risco"] == "üü¢": cor = CORES["VERDE"]
            elif ninho["risco"] == "üü°": cor = CORES["AMARELO"]
            elif ninho["risco"] == "üî¥": cor = CORES["VERMELHO"]

            predadores_str = "Sim" if ninho["predadores"] else "N√£o"
            print(f"{cor}| {id_ninho:<3} | {ninho['regiao']:<15} | {ninho['quantidade_ovos']:<5} | {ninho['status']:<12} | {ninho['risco']:<7} | {ninho['dias_para_eclosao']:<16} | {predadores_str:<10} | {ninho['causa_risco']:<12} |{CORES['RESET']}")
            id_ninho += 1
    desenhar_divisor()

def calcular_estatisticas_basicas(base_de_ninhos):
    """Calcula e exibe as estat√≠sticas b√°sicas de forma visual."""
    desenhar_divisor()
    print("||" + " ESTAT√çSTICAS B√ÅSICAS DE MONITORAMENTO ".center(76) + "||")
    desenhar_divisor()
    if not base_de_ninhos: print("\nNenhum dado para an√°lise.\n"); desenhar_divisor(); return

    total_ninhos = len(base_de_ninhos)
    print(f"\n[ 1 ] TOTAL DE NINHOS: {CORES['AZUL']}{CORES['NEGRITO']}{total_ninhos}{CORES['RESET']}")

    ovos_estaveis, ninhos_estaveis = 0, 0
    for n in base_de_ninhos:
        if n["risco"] == "üü¢": ovos_estaveis += n["quantidade_ovos"]; ninhos_estaveis += 1
    if ninhos_estaveis > 0: print(f"[ 2 ] M√âDIA DE OVOS (EST√ÅVEIS üü¢): {CORES['VERDE']}{int(ovos_estaveis/ninhos_estaveis)}{CORES['RESET']} ovos")
    else: print("[ 2 ] M√âDIA DE OVOS (EST√ÅVEIS ÔøΩ): N√£o h√° ninhos est√°veis.")

    ninhos_eclosao = sum(1 for n in base_de_ninhos if n["dias_para_eclosao"] <= 5)
    print(f"[ 3 ] ECLOS√ÉO PR√ìXIMA (<= 5 dias): {CORES['CIANO']}{ninhos_eclosao}{CORES['RESET']} ninhos")

    risco_regiao = {}
    for n in base_de_ninhos:
        if n["risco"] == "üü°":
            risco_regiao[n["regiao"]] = risco_regiao.get(n["regiao"], 0) + 1

    if not risco_regiao: print("[ 4 ] REGI√ÉO COM MAIS RISCO (üü°): Nenhuma.")
    else: regiao_mais_risco = max(risco_regiao, key=risco_regiao.get); print(f"[ 4 ] REGI√ÉO COM MAIS RISCO (üü°): {CORES['AMARELO']}{regiao_mais_risco} ({risco_regiao[regiao_mais_risco]} ninhos){CORES['RESET']}")

    danificados_predadores = sum(1 for n in base_de_ninhos if n["status"] == "danificado" and n["predadores"])
    print(f"[ 5 ] DANIFICADOS C/ PREDADORES: {CORES['VERMELHO']}{danificados_predadores}{CORES['RESET']} ninhos")
    print()
    desenhar_divisor()

def analise_descritiva_completa(base_de_ninhos):
    """Fornece um panorama estat√≠stico descritivo com visualiza√ß√µes."""
    desenhar_divisor()
    print("||" + " AN√ÅLISE DESCRITIVA COMPLETA ".center(76) + "||")
    desenhar_divisor()
    if not base_de_ninhos: print("\nNenhum dado para an√°lise.\n"); desenhar_divisor(); return

    print(f"\n--- 1. An√°lise de Ovos por Status do Ninho ---")
    stats_ovos = {"intacto": [], "amea√ßado": [], "danificado": []}
    for n in base_de_ninhos: stats_ovos[n["status"]].append(n["quantidade_ovos"])
    for status, ovos_lista in stats_ovos.items():
        if ovos_lista:
            media = int(sum(ovos_lista) / len(ovos_lista))
            print(f"  - {status.title():<12}: M√©dia={media:<4} M√≠n={min(ovos_lista):<4} M√°x={max(ovos_lista):<4}")
        else:
            print(f"  - {status.title():<12}: Nenhum ninho encontrado.")

    print("\n--- 2. Distribui√ß√£o Percentual dos Ninhos ---")
    total = len(base_de_ninhos)
    dist_status = {s: sum(1 for n in base_de_ninhos if n['status'] == s) for s in ["intacto", "amea√ßado", "danificado"]}
    dist_risco = {r: sum(1 for n in base_de_ninhos if n['risco'] == r) for r in ["üü¢", "üü°", "üî¥"]}

    print("  - Por Status:")
    for status, count in dist_status.items():
        percentual = (count / total) * 100
        barra = gerar_barra_percentual(percentual)
        print(f"    {status.title():<12} {barra} {percentual:.1f}% ({count}/{total})")
    print("  - Por Risco:")
    for risco, count in dist_risco.items():
        percentual = (count / total) * 100
        barra = gerar_barra_percentual(percentual)
        print(f"    Risco {risco}      {barra} {percentual:.1f}% ({count}/{total})")

    print("\n--- 3. Ranking de Regi√µes (Mapa de Calor de Risco) ---")
    contagem_regiao = {}
    for n in base_de_ninhos:
        contagem_regiao[n["regiao"]] = contagem_regiao.get(n["regiao"], 0) + 1

    regioes_ordenadas = sorted(contagem_regiao.items(), key=lambda item: item[1], reverse=True)
    for i, (regiao, count) in enumerate(regioes_ordenadas):
        ninhos_na_regiao = [n for n in base_de_ninhos if n['regiao'] == regiao]
        risco_critico = sum(1 for n in ninhos_na_regiao if n['risco'] == 'üî¥')

        cor_regiao = CORES['VERDE']
        if risco_critico > 0:
            taxa_risco = (risco_critico / len(ninhos_na_regiao)) * 100
            if taxa_risco > 50:
                cor_regiao = CORES['VERMELHO']
            else:
                cor_regiao = CORES['AMARELO']

        print(f"  {i+1}¬∫. {cor_regiao}{regiao:<15}{CORES['RESET']}: {count} ninhos")
    print()
    desenhar_divisor()

def analise_diagnostica_cruzada(base_de_ninhos):
    """Busca responder 'por qu√™s' ao cruzar diferentes vari√°veis."""
    desenhar_divisor()
    print("||" + " AN√ÅLISE DIAGN√ìSTICA CRUZADA ".center(76) + "||")
    desenhar_divisor()
    if not base_de_ninhos: print("\nNenhum dado para an√°lise.\n"); desenhar_divisor(); return

    print("\n--- 1. Diagn√≥stico de Causa para Ninhos Danificados ---")
    ninhos_danificados = [n for n in base_de_ninhos if n['status'] == 'danificado']
    if not ninhos_danificados:
        print("  Nenhum ninho danificado para analisar.")
    else:
        causas_danos = {}
        for n in ninhos_danificados:
            causas_danos[n["causa_risco"]] = causas_danos.get(n["causa_risco"], 0) + 1

        causa_principal = max(causas_danos, key=causas_danos.get)
        print(f"  A principal causa de danos √©: {CORES['VERMELHO']}'{causa_principal.title()}'{CORES['RESET']} ({causas_danos[causa_principal]}/{len(ninhos_danificados)} casos)")

    print("\n--- 2. An√°lise de Impacto de Predadores ---")
    ninhos_com_predador = [n for n in base_de_ninhos if n['predadores']]
    if not ninhos_com_predador:
        print("  Nenhum ninho com registro de predadores.")
    else:
        danificados = sum(1 for n in ninhos_com_predador if n['status'] == 'danificado')
        taxa_sucesso = (danificados / len(ninhos_com_predador)) * 100
        cor_taxa = CORES['VERMELHO'] if taxa_sucesso >= 50 else CORES['AMARELO']
        print(f"  Dos {len(ninhos_com_predador)} ninhos com predadores, {danificados} foram danificados.")
        print(f"  Taxa de sucesso da preda√ß√£o: {cor_taxa}{taxa_sucesso:.1f}%{CORES['RESET']}")
    print()
    desenhar_divisor()

def adicionar_novo_ninho(base_de_ninhos):
    """Guia o usu√°rio para adicionar um novo registro de ninho, com valida√ß√£o robusta."""
    desenhar_divisor("-")
    print("||" + " ADICIONAR NOVO REGISTRO DE NINHO ".center(76) + "||")
    desenhar_divisor("-")

    # Valida√ß√£o da Regi√£o
    regioes_conhecidas = sorted(list(set(n["regiao"] for n in base_de_ninhos)))
    while True:
        print(f"Regi√µes conhecidas: {', '.join(regioes_conhecidas)}")
        regiao_input = input("Digite o nome da regi√£o: ").strip().title()
        if regiao_input in regioes_conhecidas:
            regiao = regiao_input
            break
        elif regiao_input:
            confirmacao = input(f"A regi√£o '{regiao_input}' √© nova. Deseja adicion√°-la? (s/n): ").lower().strip()
            if confirmacao == 's':
                regiao = regiao_input
                break
        else:
            print(f"{CORES['VERMELHO']}Erro: O nome da regi√£o n√£o pode ser vazio.{CORES['RESET']}")

    # Valida√ß√£o da Quantidade de Ovos
    while True:
        ovos_input = input(f"Digite a quantidade de ovos ({OVOS_MIN_REALISTA}-{OVOS_MAX_REALISTA}): ").strip()
        if ovos_input.isdigit():
            quantidade_ovos = int(ovos_input)
            if OVOS_MIN_REALISTA <= quantidade_ovos <= OVOS_MAX_REALISTA:
                break
            else:
                print(f"{CORES['VERMELHO']}Erro: Valor fora dos limites realistas.{CORES['RESET']}")
        else:
            print(f"{CORES['VERMELHO']}Erro: Por favor, digite um n√∫mero inteiro v√°lido.{CORES['RESET']}")

    # Valida√ß√£o do Status
    status_validos = ["intacto", "amea√ßado", "danificado"]
    while True:
        status = input(f"Digite o status ({'/'.join(status_validos)}): ").lower().strip()
        if status in status_validos:
            break
        else:
            print(f"{CORES['VERMELHO']}Erro: Status inv√°lido.{CORES['RESET']}")

    # Valida√ß√£o do Risco
    riscos_validos = ["üü¢", "üü°", "üî¥"]
    while True:
        risco = input(f"Digite o risco ({''.join(riscos_validos)}): ").strip()
        if risco in riscos_validos:
            break
        else:
            print(f"{CORES['VERMELHO']}Erro: Risco inv√°lido.{CORES['RESET']}")

    # Valida√ß√£o dos Dias para Eclos√£o
    while True:
        dias_input = input(f"Digite os dias para eclos√£o ({DIAS_ECLOSAO_MIN}-{DIAS_ECLOSAO_MAX}): ").strip()
        if dias_input.isdigit():
            dias_para_eclosao = int(dias_input)
            if DIAS_ECLOSAO_MIN <= dias_para_eclosao <= DIAS_ECLOSAO_MAX:
                break
            else:
                print(f"{CORES['VERMELHO']}Erro: Valor fora dos limites realistas.{CORES['RESET']}")
        else:
            print(f"{CORES['VERMELHO']}Erro: Por favor, digite um n√∫mero inteiro v√°lido.{CORES['RESET']}")

    # Valida√ß√£o da Presen√ßa de Predadores
    while True:
        predadores_input = input("H√° presen√ßa de predadores? (s/n): ").lower().strip()
        if predadores_input == 's':
            predadores = True
            break
        elif predadores_input == 'n':
            predadores = False
            break
        else:
            print(f"{CORES['VERMELHO']}Erro: Resposta inv√°lida.{CORES['RESET']}")

    # Valida√ß√£o da Causa do Risco
    causas_validas = ["predador", "alagamento", "humano", "desconhecida", "nenhuma"]
    while True:
        causa_risco = input(f"Digite a causa do risco ({'/'.join(causas_validas)}): ").lower().strip()
        if causa_risco in causas_validas:
            break
        else:
            print(f"{CORES['VERMELHO']}Erro: Causa inv√°lida.{CORES['RESET']}")

    novo_ninho = {
        "regiao": regiao,
        "quantidade_ovos": quantidade_ovos,
        "status": status,
        "risco": risco,
        "dias_para_eclosao": dias_para_eclosao,
        "predadores": predadores,
        "causa_risco": causa_risco
    }
    base_de_ninhos.append(novo_ninho)
    print(f"\n{CORES['VERDE']}---> Sucesso! Novo ninho registrado na base de dados. <---{CORES['RESET']}\n")
    desenhar_divisor("-")

def iniciar_sistema_avancado():
    """Fun√ß√£o principal que inicia o loop do sistema com menu avan√ßado."""
    while True:
        desenhar_divisor()
        print("*" + f"{CORES['NEGRITO']}{CORES['AZUL']} SISTEMA DE MONITORAMENTO: GUARDI√ÉO DAS TARTARUGUINHAS {CORES['RESET']}".center(98) + "*")
        desenhar_divisor()
        print("\nMENU PRINCIPAL:")
        print(f"  {CORES['AMARELO']}1. üö®{CORES['RESET']} Painel de Alerta R√°pido")
        print(f"  {CORES['CIANO']}2. üìú{CORES['RESET']} Relat√≥rio Completo")
        print(f"  {CORES['CIANO']}3. üìä{CORES['RESET']} Estat√≠sticas B√°sicas")
        print(f"  {CORES['CIANO']}4. üìù{CORES['RESET']} Adicionar Novo Registro")
        print(f"  {CORES['CIANO']}5. üî¨{CORES['RESET']} An√°lise Avan√ßada")
        print(f"  {CORES['CIANO']}6. üö™{CORES['RESET']} Sair do Sistema")
        escolha = input("\n>> Digite a op√ß√£o desejada: ").strip()
        if escolha == '1': exibir_painel_alerta(ninhos)
        elif escolha == '2': exibir_relatorio_completo(ninhos)
        elif escolha == '3': calcular_estatisticas_basicas(ninhos)
        elif escolha == '4': adicionar_novo_ninho(ninhos)
        elif escolha == '5':
            while True:
                print("\n--- Menu de An√°lise Avan√ßada ---")
                print(f"  1. üìà An√°lise Descritiva Completa")
                print(f"  2. üîç An√°lise Diagn√≥stica Cruzada")
                print(f"  3. ‚Ü©Ô∏è  Voltar ao Menu Principal")
                sub_escolha = input("\n>> Escolha a an√°lise: ").strip()
                if sub_escolha == '1': analise_descritiva_completa(ninhos)
                elif sub_escolha == '2': analise_diagnostica_cruzada(ninhos)
                elif sub_escolha == '3': break
                else: print(f"\n{CORES['VERMELHO']}[ERRO] Op√ß√£o inv√°lida.{CORES['RESET']}")
        elif escolha == '6':
            print(f"\n{CORES['VERDE']}Encerrando o sistema... Obrigado!{CORES['RESET']}\n")
            break
        else:
            print(f"\n{CORES['VERMELHO']}[ERRO] Op√ß√£o inv√°lida. Por favor, escolha um n√∫mero de 1 a 6.{CORES['RESET']}")

# INICIALIZA√á√ÉO DO PROGRAMA
iniciar_sistema_avancado()