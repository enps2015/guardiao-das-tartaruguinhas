# -*- coding: utf-8 -*-
"""guardiao_mvp

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UMilP16Cu55t7rzGZnyH_YaHQ-hlbuRz

# üê¢ Guardi√£o das Tartaruguinhas: Monitoramento Comunit√°rio de Ninhos

---

**Desenvolvido por:** Eric Narciso Pimentel dos Santos

**Curso:** Intelig√™ncia Artificial Aplicada aos Desafios Socioambientais da Amaz√¥nia

**Institui√ß√£o:** I2A2 - Instituto de Intelig√™ncia Artificial Aplicada

**Data:** 28/07/2025

---

## 1. Contexto do Projeto

Em uma comunidade ribeirinha no cora√ß√£o da Amaz√¥nia, um esfor√ßo coletivo e inspirador de conserva√ß√£o dos quel√¥nios ganha vida. Liderado por professores e jovens volunt√°rios, o projeto **Guardi√£o das Tartaruguinhas** visa monitorar os ninhos de tartarugas para garantir que o maior n√∫mero poss√≠vel de filhotes chegue com seguran√ßa ao rio, fortalecendo o ciclo de preserva√ß√£o e a cultura local.

## 2. O Desafio

Os dados dos ninhos ‚Äî como localiza√ß√£o, quantidade de ovos, status e riscos ‚Äî eram registrados manualmente em papel. Essa metodologia, embora nobre, resultava em informa√ß√µes desorganizadas, inconsistentes e de dif√≠cil an√°lise. Responder a perguntas essenciais para a tomada de decis√£o, como "Qual a m√©dia de ovos?" ou "Qual regi√£o apresenta maior risco?", tornava-se uma tarefa √°rdua e imprecisa.

## 3. A Solu√ß√£o Proposta

Este notebook representa a solu√ß√£o tecnol√≥gica para o desafio. Trata-se de um sistema simples, por√©m robusto, desenvolvido em Python para permitir que os volunt√°rios da comunidade possam:

* **Registrar** os dados dos ninhos de forma padronizada.
* **Validar** as informa√ß√µes no momento da entrada para garantir sua integridade.
* **Analisar** os dados acumulados para gerar estat√≠sticas e insights acion√°veis.
* **Apoiar** a tomada de decis√£o semanal do grupo de prote√ß√£o, otimizando os esfor√ßos de conserva√ß√£o.


## Nosso desafio n√£o √© apenas contar os ovos. √â usar cada n√∫mero, cada dado, para tecer uma rede de prote√ß√£o em torno da vida. Aqui, cada linha de c√≥digo √© um ato de esperan√ßa.




Este projeto √© a ponte entre o conhecimento tradicional e a tecnologia acess√≠vel, transformando dados em um escudo para a biodiversidade amaz√¥nica.
"""

# =============================================================================
# TAREFA INDIVIDUAL V: Guardi√£o das Tartaruguinhas (MVP)
#
# NOME DO ALUNO: Eric Narciso Pimentel dos Santos
# CURSO: Intelig√™ncia Artificial Aplicada aos Desafios Socioambientais da Amaz√¥nia
# INSTITUTO: I2A2 - Instituto de Intelig√™ncia Artificial Aplicada
# DATA: 28/07/2025
# VERS√ÉO: 2.0 - Valida√ß√£o Robusta e Regras de Neg√≥cio
# =============================================================================

# -----------------------------------------------------------------------------
# FASE 0: CONSTANTES E REGRAS DE NEG√ìCIO
# -----------------------------------------------------------------------------
# Para garantir a integridade dos dados, definimos limites realistas
# baseados no conhecimento de dom√≠nio (biologia dos quel√¥nios).
OVOS_MIN_REALISTA = 5
OVOS_MAX_REALISTA = 200
DIAS_ECLOSAO_MIN = 1
DIAS_ECLOSAO_MAX = 130

# -----------------------------------------------------------------------------
# FASE 1: ESTRUTURA DE DADOS E CARGA INICIAL
# -----------------------------------------------------------------------------
# Base de dados inicial com 10 registros, usando os emojis corretos (üü¢, üü°, üî¥).
ninhos = [
    {"regiao": "Praia Norte", "quantidade_ovos": 102, "status": "intacto", "risco": "üü¢", "dias_para_eclosao": 12, "predadores": False},
    {"regiao": "Praia Central", "quantidade_ovos": 89, "status": "danificado", "risco": "üî¥", "dias_para_eclosao": 3, "predadores": True},
    {"regiao": "Praia Sul", "quantidade_ovos": 120, "status": "amea√ßado", "risco": "üü°", "dias_para_eclosao": 7, "predadores": False},
    {"regiao": "Praia Central", "quantidade_ovos": 75, "status": "intacto", "risco": "üü¢", "dias_para_eclosao": 2, "predadores": False},
    {"regiao": "Praia Norte", "quantidade_ovos": 60, "status": "danificado", "risco": "üî¥", "dias_para_eclosao": 5, "predadores": True},
    {"regiao": "Praia Sul", "quantidade_ovos": 95, "status": "intacto", "risco": "üü¢", "dias_para_eclosao": 20, "predadores": False},
    {"regiao": "Praia Norte", "quantidade_ovos": 110, "status": "amea√ßado", "risco": "üü°", "dias_para_eclosao": 8, "predadores": True},
    {"regiao": "Praia Central", "quantidade_ovos": 81, "status": "amea√ßado", "risco": "üü°", "dias_para_eclosao": 15, "predadores": False},
    {"regiao": "Praia Sul", "quantidade_ovos": 70, "status": "danificado", "risco": "üî¥", "dias_para_eclosao": 1, "predadores": True},
    {"regiao": "Praia Norte", "quantidade_ovos": 130, "status": "intacto", "risco": "üü¢", "dias_para_eclosao": 25, "predadores": False},
]

# -----------------------------------------------------------------------------
# FASE 2: FUN√á√ïES DO SISTEMA
# -----------------------------------------------------------------------------

def exibir_relatorio_completo(base_de_ninhos):
    """Exibe um relat√≥rio formatado com os dados de todos os ninhos registrados."""
    print("\n" + "="*80)
    print("||" + " RELAT√ìRIO COMPLETO DE NINHOS ".center(76) + "||")
    print("="*80)

    if not base_de_ninhos:
        print("\nNenhum ninho registrado na base de dados.\n")
    else:
        print(f"| {'ID':<3} | {'REGI√ÉO':<15} | {'OVOS':<5} | {'STATUS':<12} | {'RISCO':<7} | {'ECLOS√ÉO (dias)':<16} | {'PREDADORES':<10} |")
        print("-" * 80)

        id_ninho = 1
        for ninho in base_de_ninhos:
            predadores_str = "Sim" if ninho["predadores"] else "N√£o"
            print(f"| {id_ninho:<3} | {ninho['regiao']:<15} | {ninho['quantidade_ovos']:<5} | {ninho['status']:<12} | {ninho['risco']:<7} | {ninho['dias_para_eclosao']:<16} | {predadores_str:<10} |")
            id_ninho = id_ninho + 1

    print("="*80)


def calcular_estatisticas(base_de_ninhos):
    """Calcula e exibe as estat√≠sticas chave sobre os ninhos monitorados."""
    print("\n" + "="*80)
    print("||" + " ESTAT√çSTICAS DE MONITORAMENTO ".center(76) + "||")
    print("="*80)

    if not base_de_ninhos:
        print("\nNenhum dado para an√°lise.\n")
        print("="*80)
        return

    # 1. Total de ninhos
    total_ninhos = len(base_de_ninhos)
    print(f"\n[ 1 ] TOTAL DE NINHOS MONITORADOS: {total_ninhos}")

    # 2. M√©dia de ovos em ninhos est√°veis (üü¢)
    ovos_estaveis = 0
    ninhos_estaveis = 0
    for ninho in base_de_ninhos:
        if ninho["risco"] == "üü¢":
            ovos_estaveis = ovos_estaveis + ninho["quantidade_ovos"]
            ninhos_estaveis = ninhos_estaveis + 1

    if ninhos_estaveis > 0:
        media_ovos_estaveis = ovos_estaveis / ninhos_estaveis
        print(f"[ 2 ] M√âDIA DE OVOS EM NINHOS EST√ÅVEIS (üü¢): {int(media_ovos_estaveis)} ovos")
    else:
        print("[ 2 ] M√âDIA DE OVOS EM NINHOS EST√ÅVEIS (üü¢): N√£o h√° ninhos est√°veis para calcular.")

    # 3. Ninhos prestes a eclodir
    ninhos_prestes_a_eclodir = 0
    for ninho in base_de_ninhos:
        if ninho["dias_para_eclosao"] <= 5:
            ninhos_prestes_a_eclodir = ninhos_prestes_a_eclodir + 1
    print(f"[ 3 ] NINHOS COM ECLOS√ÉO PR√ìXIMA (<= 5 dias): {ninhos_prestes_a_eclodir}")

    # 4. Regi√£o com mais ninhos em risco (üü°)
    contagem_risco_por_regiao = {}
    for ninho in base_de_ninhos:
        if ninho["risco"] == "üü°":
            regiao = ninho["regiao"]
            if regiao in contagem_risco_por_regiao:
                contagem_risco_por_regiao[regiao] = contagem_risco_por_regiao[regiao] + 1
            else:
                contagem_risco_por_regiao[regiao] = 1

    if not contagem_risco_por_regiao:
        print("[ 4 ] REGI√ÉO COM MAIS NINHOS EM RISCO (üü°): Nenhum ninho classificado como 'amea√ßado'.")
    else:
        regiao_mais_risco = ""
        maior_contagem = 0
        for regiao, contagem in contagem_risco_por_regiao.items():
            if contagem > maior_contagem:
                maior_contagem = contagem
                regiao_mais_risco = regiao
        print(f"[ 4 ] REGI√ÉO COM MAIS NINHOS EM RISCO (üü°): {regiao_mais_risco} ({maior_contagem} ninhos)")

    # 5. Ninhos danificados com predadores
    ninhos_danificados_com_predadores = 0
    for ninho in base_de_ninhos:
        if ninho["status"] == "danificado" and ninho["predadores"] == True:
            ninhos_danificados_com_predadores = ninhos_danificados_com_predadores + 1
    print(f"[ 5 ] NINHOS DANIFICADOS COM PREDADORES: {ninhos_danificados_com_predadores}")

    print("\n" + "="*80)


def adicionar_novo_ninho(base_de_ninhos):
    """Guia o usu√°rio para adicionar um novo registro de ninho, com valida√ß√£o robusta."""
    print("\n" + "-"*80)
    print("||" + " ADICIONAR NOVO REGISTRO DE NINHO ".center(76) + "||")
    print("-"*80)

    # --- Valida√ß√£o da Regi√£o ---
    regioes_conhecidas = []
    for ninho in base_de_ninhos:
        if ninho["regiao"] not in regioes_conhecidas:
            regioes_conhecidas.append(ninho["regiao"])

    while True:
        print(f"Regi√µes conhecidas: {', '.join(regioes_conhecidas)}")
        regiao_input = input("Digite o nome da regi√£o: ").strip().title() # Padroniza para ex: "Praia Leste"
        if regiao_input in regioes_conhecidas:
            regiao = regiao_input
            break
        # Permite adicionar nova regi√£o, mas pede confirma√ß√£o
        elif regiao_input:
             confirmacao = input(f"A regi√£o '{regiao_input}' √© nova. Deseja adicion√°-la? (s/n): ").lower().strip()
             if confirmacao == 's':
                 regiao = regiao_input
                 break
        else:
            print("Erro: O nome da regi√£o n√£o pode ser vazio.")

    # --- Valida√ß√£o da Quantidade de Ovos ---
    while True:
        ovos_input = input(f"Digite a quantidade de ovos (entre {OVOS_MIN_REALISTA} e {OVOS_MAX_REALISTA}): ").strip()
        is_numeric = True
        if not ovos_input: is_numeric = False
        for char in ovos_input:
            if char not in "0123456789":
                is_numeric = False
                break

        if is_numeric:
            quantidade_ovos = int(ovos_input)
            if OVOS_MIN_REALISTA <= quantidade_ovos <= OVOS_MAX_REALISTA:
                break
            else:
                print(f"Erro: Valor fora dos limites realistas ({OVOS_MIN_REALISTA}-{OVOS_MAX_REALISTA}).")
        else:
            print("Erro: Por favor, digite um n√∫mero inteiro v√°lido e n√£o negativo.")

    # --- Valida√ß√£o do Status ---
    status_validos = ["intacto", "amea√ßado", "danificado"]
    while True:
        status = input(f"Digite o status ({', '.join(status_validos)}): ").lower().strip()
        if status in status_validos:
            break
        else:
            print(f"Erro: Status inv√°lido. Use uma das op√ß√µes: {', '.join(status_validos)}.")

    # --- Valida√ß√£o do Risco ---
    riscos_validos = ["üü¢", "üü°", "üî¥"]
    while True:
        risco = input(f"Digite o risco (s√≠mbolos permitidos: {', '.join(riscos_validos)}): ").strip()
        if risco in riscos_validos:
            break
        else:
            print(f"Erro: Risco inv√°lido. Utilize um dos s√≠mbolos: {', '.join(riscos_validos)}.")

    # --- Valida√ß√£o dos Dias para Eclos√£o ---
    while True:
        dias_input = input(f"Digite os dias para eclos√£o (entre {DIAS_ECLOSAO_MIN} e {DIAS_ECLOSAO_MAX}): ").strip()
        is_numeric = True
        if not dias_input: is_numeric = False
        for char in dias_input:
            if char not in "0123456789":
                is_numeric = False
                break

        if is_numeric:
            dias_para_eclosao = int(dias_input)
            if DIAS_ECLOSAO_MIN <= dias_para_eclosao <= DIAS_ECLOSAO_MAX:
                break
            else:
                print(f"Erro: Valor fora dos limites realistas ({DIAS_ECLOSAO_MIN}-{DIAS_ECLOSAO_MAX}).")
        else:
            print("Erro: Por favor, digite um n√∫mero inteiro v√°lido e n√£o negativo.")

    # --- Valida√ß√£o da Presen√ßa de Predadores ---
    while True:
        predadores_input = input("H√° presen√ßa de predadores? (s/n): ").lower().strip()
        if predadores_input == 's':
            predadores = True
            break
        elif predadores_input == 'n':
            predadores = False
            break
        else:
            print("Erro: Resposta inv√°lida. Digite 's' para sim ou 'n' para n√£o.")

    # --- Cria√ß√£o e Adi√ß√£o do Novo Ninho ---
    novo_ninho = {
        "regiao": regiao,
        "quantidade_ovos": quantidade_ovos,
        "status": status,
        "risco": risco,
        "dias_para_eclosao": dias_para_eclosao,
        "predadores": predadores
    }

    base_de_ninhos.append(novo_ninho)
    print("\n---> Sucesso! Novo ninho registrado na base de dados. <---\n")
    print("-"*80)


# -----------------------------------------------------------------------------
# FASE 3: INTERFACE PRINCIPAL DO SISTEMA (LOOP DE EXECU√á√ÉO)
# -----------------------------------------------------------------------------

def iniciar_sistema():
    """Fun√ß√£o principal que inicia o loop do sistema interativo."""
    while True:
        print("\n" + "*"*80)
        print("*" + " SISTEMA DE MONITORAMENTO: GUARDI√ÉO DAS TARTARUGUINHAS ".center(78) + "*")
        print("*"*80)
        print("\nMENU DE OP√á√ïES:")
        print("  1. Visualizar Relat√≥rio Completo de Ninhos")
        print("  2. Consultar Estat√≠sticas de Monitoramento")
        print("  3. Adicionar Novo Registro de Ninho")
        print("  4. Sair do Sistema")

        escolha = input("\n>> Digite o n√∫mero da op√ß√£o desejada: ").strip()

        if escolha == '1':
            exibir_relatorio_completo(ninhos)
        elif escolha == '2':
            calcular_estatisticas(ninhos)
        elif escolha == '3':
            adicionar_novo_ninho(ninhos)
        elif escolha == '4':
            print("\nEncerrando o sistema... Obrigado por proteger nossas tartarugas!\n")
            break
        else:
            print("\n[ERRO] Op√ß√£o inv√°lida. Por favor, escolha um n√∫mero de 1 a 4.")

# -----------------------------------------------------------------------------
# INICIALIZA√á√ÉO DO PROGRAMA
# -----------------------------------------------------------------------------
iniciar_sistema()